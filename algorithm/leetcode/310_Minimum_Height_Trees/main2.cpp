/*
310. Minimum Height Trees

For an undirected graph with tree characteristics, we can choose any node as the root. The result graph is then a rooted tree. Among all possible rooted trees, those with minimum height are called minimum height trees (MHTs). Given such a graph, write a function to find all the MHTs and return a list of their root labels.

Format
The graph contains n nodes which are labeled from 0 to n - 1. You will be given the number n and a list of undirected edges (each edge is a pair of labels).

You can assume that no duplicate edges will appear in edges. Since all edges are undirected, [0, 1] is the same as [1, 0] and thus will not appear together in edges.

Example 1 :

Input: n = 4, edges = [[1, 0], [1, 2], [1, 3]]

        0
        |
        1
       / \
      2   3

Output: [1]
Example 2 :

Input: n = 6, edges = [[0, 3], [1, 3], [2, 3], [4, 3], [5, 4]]

     0  1  2
      \ | /
        3
        |
        4
        |
        5

Output: [3, 4]
Note:

According to the definition of tree on Wikipedia: “a tree is an undirected graph in which any two vertices are connected by exactly one path. In other words, any connected graph without simple cycles is a tree.”
The height of a rooted tree is the number of edges on the longest downward path between the root and a leaf.
*/
// CL: This method with BFS can not pass
#include<vector>
#include<algorithm>
#include<iostream>
#include<string>
#include<queue>
#include<unordered_map>
#include<unordered_set>

using namespace std;

class Solution
{
public:
    vector<int> findMinHeightTrees(int n, vector<vector<int>>& edges)
    {
        vector<int> ret;
        if(n ==0) {
            return ret;
        }
        if(n == 1 && edges.empty()) {
            ret.push_back(0);
            return ret;
        }
        unordered_map<int, vector<int>> graph;
        vector<int> degrees(n, 0);
        for(auto edge: edges) {
            graph[edge[0]].push_back(edge[1]);
            graph[edge[1]].push_back(edge[0]);
            degrees[edge[0]]++;
            degrees[edge[1]]++;
        }
        while(graph.size()>2) {
            vector<int> cuts;
            for(int i=0; i<n; i++) {
                if(degrees[i] == 1) {
                    cuts.push_back(i);
                    degrees[i]--;
                }
            }
            for(int cut:cuts) {
                for(int node :graph[cut]) {
                    degrees[node]--;
                }
                graph.erase(cut);
            }
        }
        for(unordered_map<int, vector<int>>::iterator iter=graph.begin(); iter!=graph.end(); iter++) {
            ret.push_back(iter->first);
        }
        return ret;
    }
};
int main()
{
    Solution sln;
    vector<vector<int>> edges = {{1, 0}, {1, 2}, {1, 3}}; // 1
    vector<int> vals = sln.findMinHeightTrees(4, edges);
    for(int val : vals) {
        cout << val << " ";
    }
    cout << endl;

    vector<vector<int>> edges2 = {{0, 3}, {1, 3}, {2, 3}, {4, 3}, {5, 4}};
    vals = sln.findMinHeightTrees(6, edges2);
    for(int val : vals) {
        cout << val << " ";
    }
    cout << endl;

    vector<vector<int>> edges3 = {{0,1},{0,2},{0,3},{2,4},{0,5},{1,6},{3,7},{2,8},{1,9},{4,10},{7,11},{8,12},{12,13},{2,14},{3,15},{10,16},
        {12,17},{4,18},{18,19},{19,20},{20,21},{18,22},{4,23},{22,24},{10,25},{4,26},{4,27},{19,28},{0,29},{19,30},{27,31},
        {13,32},{11,33},{10,34},{1,35},{24,36},{35,37},{23,38},{33,39},{29,40},{17,41},{28,42},{6,43},{42,44},{44,45},{3,46},
        {18,47},{29,48},{4,49},{47,50},{5,51},{19,52},{37,53},{46,54},{11,55},{13,56},{24,57},{48,58},{5,59},{3,60},{10,61},
        {31,62},{14,63},{49,64},{15,65},{14,66},{39,67},{8,68},{15,69},{52,70},{26,71},{37,72},{42,73},{20,74},{51,75},{13,76},
        {2,77},{2,78},{51,79},{33,80},{79,81},{40,82},{82,83},{63,84},{4,85},{67,86},{25,87},{86,88},{14,89},{43,90},{40,91},{38,92},
        {64,93},{71,94},{21,95},{75,96},{29,97},{11,98},{26,99},{0,100},{96,101},{91,102},{79,103},{81,104},{69,105},{10,106},{89,107},
        {46,108},{22,109},{18,110},{92,111},{43,112},{96,113},{17,114},{4,115},{20,116},{78,117},{63,118},{48,119},{14,120},{64,121},
        {73,122},{47,123},{1,124},{18,125},{9,126},{123,127},{15,128},{66,129},{129,130},{66,131},{116,132},{126,133},{37,134},{125,135},
        {30,136},{103,137},{88,138},{90,139},{99,140},{60,141},{90,142},{86,143},{127,144},{99,145},{41,146},{34,147},{112,148},{53,149},
        {131,150},{10,151},{121,152},{42,153},{122,154},{154,155},{95,156},{21,157},{117,158},{97,159},{147,160},{87,161},{12,162},{36,163},
        {160,164},{116,165},{133,166},{116,167},{47,168},{82,169},{112,170},{91,171},{58,172},{156,173},{97,174},{6,175},{32,176},{115,177},
        {52,178},{128,179},{154,180},{135,181},{47,182},{74,183},{2,184},{101,185},{37,186},{2,187},{92,188},{116,189},{40,190},{112,191},
        {5,192},{160,193},{103,194},{176,195},{45,196},{80,197},{41,198},{100,199},{2,200},{168,201},{186,202},{202,203},{179,204},{117,205},
        {67,206},{170,207},{131,208},{13,209},{155,210},{51,211},{34,212},{75,213},{183,214},{172,215},{23,216},{200,217},{1,218},{81,219},
        {52,220},{37,221},{73,222},{48,223},{155,224},{109,225},{38,226},{52,227},{182,228},{99,229},{228,230},{116,231},{17,232},{29,233},
        {76,234},{78,235},{100,236},{68,237},{225,238},{178,239},{204,240},{205,241},{138,242},{94,243},{228,244},{88,245},{106,246},{220,247},
        {114,248},{224,249},{118,250},{53,251},{32,252},{69,253},{235,254},{61,255},{149,256},{130,257},{70,258},{65,259},{115,260},{134,261},
        {256,262},{229,263},{73,264},{1,265},{191,266},{0,267},{107,268},{94,269},{141,270},{129,271},{31,272},{266,273},{112,274},{117,275},
        {225,276},{147,277},{139,278},{178,279},{72,280},{241,281},{271,282},{88,283},{11,284},{36,285},{101,286},{236,287},{161,288},{70,289},
        {272,290},{108,291},{172,292},{291,293},{112,294},{111,295},{190,296},{176,297},{191,298},{223,299},{55,300},{147,301},{52,302},{127,303},
        {16,304},{133,305},{294,306},{123,307},{232,308},{163,309},{7,310},{288,311},{132,312},{300,313},{154,314},{171,315},{169,316},{304,317},
        {122,318},{289,319},{282,320},{122,321},{196,322},{4,323},{302,324},{255,325},{110,326},{262,327},{59,328},{193,329},{185,330},{42,331},
        {81,332},{84,333},{312,334},{113,335},{82,336},{63,337},{8,338},{299,339},{154,340},{255,341},{193,342},{100,343},{260,344},{102,345},
        {300,346},{85,347},{103,348},{5,349},{343,350},{18,351},{39,352},{86,353},{180,354},{39,355},{52,356},{191,357},{331,358},{170,359},
        {262,360},{205,361},{38,362},{63,363},{300,364},{79,365},{322,366},{224,367},{26,368},{173,369},{172,370},{305,371},{249,372},{182,373},
        {161,374},{128,375},{26,376},{37,377},{11,378},{152,379},{180,380},{356,381},{144,382},{95,383},{204,384},{130,385},{134,386},{204,387},
        {362,388},{111,389},{21,390},{258,391},{369,392},{77,393},{50,394},{268,395},{232,396},{7,397},{235,398},{41,399},{172,400},{67,401},
        {370,402},{249,403},{83,404},{140,405},{360,406},{387,407},{147,408},{275,409},{14,410},{306,411},{256,412},{168,413},{399,414},{328,415},
        {332,416},{21,417},{8,418},{340,419},{337,420},{113,421},{212,422},{253,423},{1,424},{14,425},{8,426},{266,427},{277,428},{370,429},
        {394,430},{285,431},{428,432},{386,433},{66,434},{29,435},{340,436},{430,437},{188,438},{205,439},{347,440},{380,441},{395,442},{231,443},
        {163,444},{398,445},{325,446},{410,447},{108,448},{298,449},{398,450},{187,451},{444,452},{145,453},{297,454},{235,455},{249,456},{154,457},
        {357,458},{319,459},{179,460},{435,461},{385,462},{32,463},{285,464},{77,465},{92,466},{382,467},{458,468},{67,469},{198,470},{42,471},
        {205,472},{202,473},{20,474},{203,475},{330,476},{56,477},{244,478},{390,479},{240,480},{352,481},{16,482},{401,483},{11,484},{227,485},
        {453,486},{419,487},{271,488},{254,489},{1,490},{224,491},{87,492},{309,493},{266,494},{327,495},{437,496},{30,497},{252,498},{348,499},
        {3,500},{7,501},{77,502},{103,503},{359,504},{310,505},{97,506},{141,507},{244,508},{455,509},{467,510},{318,511},{437,512},{465,513},
        {62,514},{217,515},{174,516},{307,517},{487,518},{500,519},{301,520},{250,521},{138,522},{41,523},{368,524},{376,525},{500,526},{318,527},
        {182,528},{12,529},{306,530},{493,531},{514,532},{184,533},{191,534},{178,535},{331,536},{522,537},{246,538},{70,539},{169,540},{157,541},
        {406,542},{447,543},{307,544},{70,545},{378,546},{117,547},{426,548},{169,549},{424,550},{233,551},{424,552},{484,553},{2,554},{123,555},
        {19,556},{379,557},{82,558},{207,559},{453,560},{168,561},{338,562},{89,563},{407,564},{164,565},{547,566},{441,567},{198,568},{435,569},
        {107,570},{90,571},{150,572},{274,573},{92,574},{562,575},{314,576},{524,577},{159,578},{20,579},{38,580},{75,581},{475,582},{248,583},
        {108,584},{72,585},{145,586},{258,587},{234,588},{554,589},{314,590},{436,591},{197,592},{45,593},{559,594},{398,595},{539,596},{71,597},
        {219,598},{399,599},{179,600},{100,601},{30,602},{505,603},{518,604},{146,605},{193,606},{481,607},{309,608},{234,609},{508,610},{509,611},
        {514,612},{361,613},{349,614},{295,615},{333,616},{509,617},{255,618},{396,619},{439,620},{439,621},{436,622},{255,623},{332,624},{159,625},
        {276,626},{152,627},{517,628},{493,629},{389,630},{291,631},{448,632},{157,633},{147,634},{416,635},{345,636},{595,637},{310,638},{310,639},
        {40,640},{228,641},{91,642},{512,643},{119,644},{285,645},{254,646},{388,647},{534,648},{378,649},{632,650},{44,651},{78,652},{574,653},
        {101,654},{225,655},{60,656},{652,657},{379,658},{70,659},{209,660},{253,661},{180,662},{336,663},{663,664},{459,665},{658,666},{116,667},
        {575,668},{391,669},{410,670},{447,671},{663,672},{547,673},{275,674},{608,675},{256,676},{265,677},{468,678},{159,679},{164,680},{63,681},
        {35,682},{89,683},{393,684},{569,685},{92,686},{309,687},{586,688},{492,689},{9,690},{73,691},{400,692},{126,693},{383,694},{643,695},
        {557,696},{622,697},{251,698},{65,699},{301,700},{130,701},{180,702},{572,703},{261,704},{22,705},{646,706},{680,707},{485,708},{306,709},
        {622,710},{456,711},{299,712},{310,713},{607,714},{347,715},{250,716},{353,717},{662,718},{151,719},{554,720},{562,721},{384,722},{359,723},
        {584,724},{616,725},{611,726},{638,727},{254,728},{666,729},{77,730},{86,731},{206,732},{206,733},{336,734},{502,735},{119,736},{416,737},
        {474,738},{226,739},{374,740},{215,741},{400,742},{225,743},{663,744},{562,745},{424,746},{385,747},{444,748},{243,749},{663,750},{311,751},
        {415,752},{739,753},{412,754},{591,755},{459,756},{409,757},{673,758},{259,759},{614,760},{637,761},{312,762},{47,763},{74,764},{700,765},
        {326,766},{647,767},{369,768},{43,769},{502,770},{197,771},{760,772},{426,773},{83,774},{229,775},{627,776},{501,777},{405,778},{364,779},
        {343,780},{761,781},{404,782},{22,783},{430,784},{436,785},{669,786},{170,787},{177,788},{323,789},{390,790},{141,791},{680,792},{420,793},
        {653,794},{44,795},{209,796},{573,797},{212,798},{450,799},{343,800},{766,801},{50,802},{385,803},{594,804},{572,805},{739,806},{600,807},
        {588,808},{507,809},{664,810},{737,811},{704,812},{354,813},{451,814},{771,815},{140,816},{459,817},{628,818},{369,819},{352,820},{756,821},
        {495,822},{594,823},{329,824},{20,825},{706,826},{23,827},{12,828},{643,829},{216,830},{98,831},{588,832},{816,833},{659,834},{447,835},
        {764,836},{769,837},{429,838},{528,839},{103,840},{397,841},{634,842},{584,843},{494,844},{48,845},{157,846},{327,847},{266,848},{92,849},
        {637,850},{593,851},{310,852},{424,853},{535,854},{326,855},{5,856},{210,857},{666,858},{38,859},{478,860},{38,861},{7,862},{367,863},
        {534,864},{123,865},{363,866},{585,867},{319,868},{316,869},{407,870},{10,871},{621,872},{827,873},{815,874},{588,875},{581,876},{371,877},
        {294,878},{853,879},{639,880},{238,881},{755,882},{525,883},{478,884},{339,885},{869,886},{364,887},{824,888},{1,889},{385,890},{737,891},
        {552,892},{97,893},{64,894},{882,895},{759,896},{740,897},{396,898},{444,899},{113,900},{348,901},{440,902},{464,903},{549,904},{813,905},
        {818,906},{23,907},{58,908},{142,909},{739,910},{700,911},{365,912},{847,913},{862,914},{472,915},{365,916},{255,917},{804,918},{711,919},
        {21,920},{918,921},{411,922},{893,923},{812,924},{183,925},{78,926},{347,927},{244,928},{667,929},{282,930},{276,931},{473,932},{886,933},
        {295,934},{312,935},{761,936},{117,937},{267,938},{52,939},{576,940},{695,941},{879,942},{465,943},{282,944},{720,945},{222,946},{80,947},
        {885,948},{239,949},{429,950},{668,951},{794,952},{774,953},{910,954},{911,955},{424,956},{886,957},{876,958},{88,959},{720,960},{320,961},
        {295,962},{773,963},{756,964},{355,965},{415,966},{765,967},{711,968},{884,969},{874,970},{776,971},{167,972},{469,973},{653,974},{725,975},
        {824,976},{53,977},{281,978},{26,979},{92,980},{524,981},{602,982},{166,983},{969,984},{252,985},{275,986},{961,987},{643,988},{88,989},
        {989,990},{975,991},{177,992},{727,993},{377,994},{751,995},{8,996},{437,997},{503,998},{643,999},{737,1000},{812,1001},{57,1002},{305,1003},
        {843,1004},{114,1005},{68,1006},{495,1007},{572,1008},{681,1009},{686,1010},{61,1011},{550,1012},{492,1013},{792,1014},{965,1015},{455,1016},
        {474,1017},{241,1018},{434,1019},{6,1020},{615,1021},{793,1022},{552,1023},{989,1024},{532,1025},{840,1026},{377,1027},{916,1028},{96,1029},
        {942,1030},{208,1031},{267,1032},{795,1033},{502,1034},{666,1035},{497,1036},{655,1037},{145,1038},{23,1039},{601,1040},{439,1041},{801,1042},
        {23,1043},{241,1044},{884,1045},{711,1046},{90,1047},{1023,1048},{672,1049},{1022,1050},{281,1051},{684,1052},{389,1053},{165,1054},{814,1055},
        {909,1056},{652,1057},{897,1058},{939,1059},{916,1060},{637,1061},{667,1062},{658,1063},{427,1064},{157,1065},{781,1066},{898,1067},{328,1068},
        {847,1069},{331,1070},{448,1071},{148,1072},{609,1073},{365,1074},{450,1075},{259,1076},{61,1077},{806,1078},{20,1079},{519,1080},{965,1081},
        {982,1082},{211,1083},{101,1084},{1010,1085},{20,1086},{92,1087},{849,1088},{760,1089},{526,1090},{544,1091},{1068,1092},{1087,1093},{1025,1094},
        {355,1095},{1075,1096},{142,1097},{404,1098},{182,1099},{628,1100},{684,1101},{101,1102},{158,1103},{66,1104},{1067,1105},{206,1106},{1015,1107},
        {1107,1108},{384,1109},{1057,1110}
    };
    vals = sln.findMinHeightTrees(1111, edges3);  // 4
    for(int val : vals) {
        cout << val << " ";
    }
    cout << endl;

    system("pause");
    return 0;
}
